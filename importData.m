%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\bs16044\Documents\EyeHead_Exp\data\smi\Participant 1-[ec6e3f1f-7a58-4e0d-8057-589060793d94]_Participant 1_001_Trial001 Samples.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2016/09/02 12:43:19

%% Initialize variables.
filename = fn; %'C:\Users\bs16044\Documents\EyeHead_Exp\data\smi\Participant 1-[ec6e3f1f-7a58-4e0d-8057-589060793d94]_Participant 1_001_Trial001 Samples.txt';
delimiter = '\t';

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]);
rawCellColumns = raw(:, [2,4,30,31,32]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
Time = cell2mat(rawNumericColumns(:, 1));
Type = rawCellColumns(:, 1);
Trial = cell2mat(rawNumericColumns(:, 2));
LDiaXpx = rawCellColumns(:, 2);
LDiaYpx = cell2mat(rawNumericColumns(:, 3));
LPupilDiametermm = cell2mat(rawNumericColumns(:, 4));
RDiaXpx = cell2mat(rawNumericColumns(:, 5));
RDiaYpx = cell2mat(rawNumericColumns(:, 6));
RPupilDiametermm = cell2mat(rawNumericColumns(:, 7));
BPORXpx = cell2mat(rawNumericColumns(:, 8));
BPORYpx = cell2mat(rawNumericColumns(:, 9));
LPORXpx = cell2mat(rawNumericColumns(:, 10));
LPORYpx = cell2mat(rawNumericColumns(:, 11));
RPORXpx = cell2mat(rawNumericColumns(:, 12));
RPORYpx = cell2mat(rawNumericColumns(:, 13));
BAOIHit = cell2mat(rawNumericColumns(:, 14));
LEPOSX = cell2mat(rawNumericColumns(:, 15));
LEPOSY = cell2mat(rawNumericColumns(:, 16));
LEPOSZ = cell2mat(rawNumericColumns(:, 17));
REPOSX = cell2mat(rawNumericColumns(:, 18));
REPOSY = cell2mat(rawNumericColumns(:, 19));
REPOSZ = cell2mat(rawNumericColumns(:, 20));
LGVECX = cell2mat(rawNumericColumns(:, 21));
LGVECY = cell2mat(rawNumericColumns(:, 22));
LGVECZ = cell2mat(rawNumericColumns(:, 23));
RGVECX = cell2mat(rawNumericColumns(:, 24));
RGVECY = cell2mat(rawNumericColumns(:, 25));
RGVECZ = cell2mat(rawNumericColumns(:, 26));
Frame = cell2mat(rawNumericColumns(:, 27));
Aux1 = rawCellColumns(:, 3);
BEventInfo = rawCellColumns(:, 4);
Stimulus = rawCellColumns(:, 5);


%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns R;