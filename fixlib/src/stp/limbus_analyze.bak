 function h = limbus_analyze(dataFile)

   close all;
   %load main variables
   
   frame_delta = 0.0008 % the C version saccade detection relies on a static sample rate
   vel_thresh = 100;
   t_thresh = 5;
   Volts2Deg = 5.2;
   
   time = stp_load_raw(dataFile, 'time');
   heading = stp_load_raw(dataFile, 'head_h');  
   pitch = stp_load_raw(dataFile, 'head_p');   
   roll = stp_load_raw(dataFile, 'head_r');
   asl_h = stp_load_raw(dataFile, 'asl_h');
   asl_v = stp_load_raw(dataFile, 'asl_v');
   pupil = stp_load_raw(dataFile, 'asl_pupil');
   saccade = stp_load_raw(dataFile, 'Saccade');
   mark = stp_load_raw(dataFile, 'Mark');
   raw_volts =  stp_load_raw(dataFile, 'saccade_raw_data'); 
   
   %convert asl pix to degrees
   [eye_h, eye_v] = bfx_pix2angle(asl_h, asl_v);
   
   %run fix_finder for vel and fixs
   [fix, fix_frames, video_eye_vel] = fix_finder_stp(time, [eye_h, eye_v], ...
					   [asl_h, asl_v, pupil], 0, 0, 0, ...
					   50, 65);

   %convert time and volts for limbus data
   time = time/1000 - time(1,1)/1000;
   %limbus_data = [frames true_time volts]
   limbus_data = stp_convert_saccade_raw_data(time, raw_volts);
   %convert limbus data to degrees and calculate velocity
   limbus_deg = limbus_data(:,3)*Volts2Deg; 
   
   deg_delta = limbus_deg(2:end)-limbus_deg(1:end-1);
   %t_delta = limbus_data(2:end,2)-limbus_data(1:end-1,2);
      
   limbus_vel = deg_delta./frame_delta;
   limbus_vel = [0; limbus_vel;];
 
   %make the saccade judgement with the video based data
   video_eye_vel = [video_eye_vel zeros(size(video_eye_vel,1),1)];
   video_eye_vel(find(video_eye_vel(:,1) >= vel_thresh),2) = 1;
  
   [saccade_new, sac_frame] = detect(t_thresh, vel_thresh,...
				     limbus_vel, limbus_data, ...
				     time);

 
   %spin through the marks - find closest saccade markers and
   %record the delta - are two loops needed?
   [B,I,J] = unique(mark);
   NewLimbusOnset = []; LimbusOnset = [];  VidOnset = [];
   sac_frame = [sac_frame; 0;]; FrameOnset = [];
   
   for i = 2:size(I,1)-1
     k1 = (I(i)+1); k2 = I(i+1);
     k_cond = (k1 <= time)&(time <= k2);
 
     %find first saccade in k1:k2
     [Y, Idx] = max(saccade(k1:k2,1));
     if(Y>0)
       LimbusOnset(end+1) = Idx + (k1-1);   
     else 
       LimbusOnset(end+1) = 0;
     end
     
     [Y, Idx] = max(video_eye_vel(k1:k2,1));
     if(Y>0)
       VidOnset(end+1) = Idx + (k1-1);   
     else 
       VidOnset(end+1) = 0;
     end
     
    
     [Y, Idx] = max(sac_frame(k1:k2,1));
     if(Y>0)
       FrameOnset(end+1) = Idx + (k1-1);   
     else 
       FrameOnset(end+1) = 0;
     end
       
     b_pass = (limbus_data(:,1) >= k1)&(limbus_data(:,1) <= k2);
     [b_lo, tmp] = min(find(b_pass));
     [b_hi, tmp] = max(find(b_pass));
     
     %find first saccade in k1:k2
     [Y, Idx] = max(saccade_new(b_lo:b_hi,1));
     if(Y>0)
       NewLimbusOnset(end+1) = Idx + (b_lo-1);   
     else 
       NewLimbusOnset(end+1) = 0;
     end
     
     
   end
   
clear Y Idx k1 k2 b_lo b_hi b_pass tmp;

%----------- Now plot the data -----------------------%      
figure(1)
plot(time, mark*10, 'k'); hold on
%plot raw data
plot(time, video_eye_vel(:,1), 'k'); hold on; 
plot(limbus_data(:,2), smooth(abs(limbus_vel), 5), 'b'); hold on;
%plot saccade detection
plot(time, saccade*150, 'r'); hold on;
plot(time, video_eye_vel(:,2)*125, 'g'); hold on
plot(limbus_data(:,2), saccade_new(:,1)*100, 'm'); hold on;
plot(time, sac_frame*80, 'y')  
plotedit


%a few results calculations
result = [unique(mark(3:end)) LimbusOnset' VidOnset' ...
	  NewLimbusOnset' FrameOnset'];

[e, f] = find(result(:,:) == 0); 

mark_size = (size(B,1)-2);
limbus_pos = size(find(result(:,2)),1);
limbus_pos2 = size(find(result(:,4)),1);
limbus_pos3 = size(find(result(:,5)),1);
asl_pos = size(find(result(:,3)),1);
limbus_correct = (limbus_pos/mark_size)*100
asl_correct = (asl_pos/mark_size)*100
limbus_correct2 = (limbus_pos2/mark_size)*100
frame_correct = (limbus_pos3/mark_size)*100

result(e,f) = 1;
result2 = [result(:,1) time(result(:,2)) time(result(:,3)) ...
	   limbus_data(result(:,4),2) time(result(:,5))]

saccades_501 = sum(video_eye_vel(:,2)) 


%label onsets of saccades on frames fro limbus
tmp = find(sac_frame == 1 );
for i = 1:size(tmp,1)
  
  if(sac_frame(tmp(i)) == 1)&(sac_frame(tmp(i)-1) == 0)
    sac_frame(tmp(i)) = 2;
  end
end

 
saccades_210_frame = sum(sac_frame)         

lim = find((result(:,2)~= 0)&(result(:,3)~= 0));
latency = (time(result(lim, 2)) - time(result(lim,3)));  
cond2 = (latency<0)&(latency>-0.15);
ave_latency = sum(latency(find(cond2)))/size(latency(find(cond2)), 1)*1000

lim2 = find((result(:,3)~= 0)&(result(:,4)~= 0));
latency2 = (limbus_data(result(lim2, 4), 2) - time(result(lim2,3)));   
cond3 =  (latency2 < 0)&(latency2 > -0.15);
ave_latency2 = sum(latency2(find(cond3)))/size(latency2(find(cond3)), 1)*1000

lim3 = find((result(:,3)~= 0)&(result(:,5)~= 0));
latency3 = (time(result(lim3, 5)) - time(result(lim3,3)));   
cond4 =  (latency3<0)&(latency3>-0.15);
ave_latency3 = sum(latency3(find(cond4)))/size(latency3(find(cond4)), 1)*1000

keyboard

return

%-------------------------------------------------------------%

function [saccade, saccade_frame] = detect(t_thresh, vel_thresh, limbus_vel, ...
				       limbus_data, t)
  

  idx = 0;
  cond1 = (abs(limbus_vel) >= vel_thresh);

  saccade = [ zeros(size(cond1,1),1) limbus_data(:, 1)];
  
  for i = 1:size(cond1,1)
  
    if((cond1(i) == 1)&(idx < t_thresh))
      idx = idx+1;
    elseif((cond1(i) == 1)&(idx >= t_thresh))
      saccade(i,1) = 1;
      idx = idx+1;
    elseif(cond1(i) == 0)
      idx = 0;
    end
  end  

  for i = 1:size(unique(saccade(:,2)), 1)
    
    I = find(saccade(:,2) == i);
    frame_sum = sum(cond1(min(I):max(I),1));
    if (frame_sum >= t_thresh)
      saccade_frame(i,1) = 1;
    else
      saccade_frame(i,1) = 0;
    end
  end
  
  return

  




