%  ANALYZE_BAUFIX.M -
%
%  Usage: 
%
%     analyze_baufix(dataFile, fixfile, binSizeX, binSizeY, sample_num)
%
%  This .m file has two main purposes: First it provides a simple
%  visualization for fixation, reach and head data. Second, it
%  processes the baufix data so that fixations can be identified and
%  labeled according to Neil Mennie's criteria specifying three
%  general types: Look-Ahead, Guiding/Grasping/Removal, and Look-Back.


function h = analyze_baufix(dataFile, fixfile, binSizeX, binSizeY, sample_num) 

close all;

%define constants with global variables? what is like #define?  
  global Piece1 Piece2 Piece3 Piece4 EmptyDist1 EmptyDist2 ...
      FullDist1 FullDist2;
  
  setup = 2; % or 1
  debug = 1; % Use 1 to display graphs and data output
  
  if(setup == 1)
    %-----------------------------------%  
    %      Constants for SETUP 1
    %-----------------------------------%
    Piece1 = 3;
    Piece2 = 2;
    Piece3 = 8;
    Piece4 = 1;
    EmptyDist1 = 4;
    EmptyDist2 = 6;
    FullDist1 = 5;
    FullDist2 = 7;
    %-----------------------------------%


  elseif(setup == 2)
    %-----------------------------------%
    %      Constants for SETUP 2
    %-----------------------------------%
    Piece1 = 2;
    Piece2 = 3;
    Piece3 = 5;

    Piece4 = 8;
    EmptyDist1 = 4;
    EmptyDist2 = 7;
    FullDist1 = 1;
    FullDist2 = 6; 
    %-----------------------------------%  
  end

  
  load(dataFile); load(fixfile);
  
  clear fixations;
  
  fixations = fix_hi_frames(:,1:2);

  
  % Set up fixation and reach data  
  rReaches2 = [rReaches rReachLabels];
  lReaches2 = [lReaches lReachLabels];
  TC = sgitime2TC(time, local2TC_slope, local2TC_offset);
  head = [time fastrak];
  time2= [time TC];
  

  %Manual labeling of scene plane bins
  [xy_average bin_count] = label_bins(binEyeHV, fixations, binSizeX, binSizeY);
  
  %setup fixation list now that we have the average xy position  
  A2 = [fixations xy_average ];
  

  %arrays for plotting
  lReachArray = [time(lReaches)-0.006  lReachLabels ];
  rReachArray = [time(rReaches)-0.006  rReachLabels ];
  fixArray = [time(fixations)-0.05 xy_average ];


  
  %Indivdidual Model Analysis:
  %Segment data file into individual models by examining hand velocity
  %processed with gaussian averaging
  
  smooth_rHandVel = smooth(rHandVel, 5);
  smooth_lHandVel = smooth(lHandVel, 5);
  
  cond1 = ((smooth_rHandVel(:,1)<25)&(smooth_lHandVel(:,1)<25));
  
  reach_size = size(rHandVel, 1);
  index = 0;
  j = 1;
  
  
  %  for i = 1:reach_size,
  for i = 2000:reach_size, %ugly fix for incorrect segmentation at beginning
    if cond1(i,1) == 0
      index = 0; 
    elseif cond1(i,1) == 1
      index = index + 1;
    end
    
    if ((index == sample_num)&(j==1))
      model(j) = i;
      j = j + 1;
      index = 0;
      
      %my fix to stop segments too close together 
    elseif ((index == sample_num)&(j>1)&...
	    ((i - model(j-1))>1500))
      model(j) = i;
      j = j + 1;
      index = 0;  
      
    elseif index > sample_num
      index = index + 1;
    end   
  end


  %now we have markers for the inter-trial pauses
  %now find the beginning and end of the pause
  
  %Model1 always begins with first data sample
  segment(1,1) = 1;
  
  
  for n = 1:4
    
    for i = model(n):reach_size
      if (cond1(i,1) == 0)
	segment(n+1,1) = i;
	break 
      end
    end
    
    segment(n,2) = model(n)-sample_num;
  end

  %Model 5 ends with the end of file:
  segment(5,2) = reach_size;

  %the pause time is useful but now we have to check the for the last
  %reach to area 12 to find the true end of trial:
  

  for i = 1:5,

    tmp1 = [abs(rReaches2(:,1:2) - segment(i,2)) rReaches2(:,3:4) (1:length(rReaches2))'];
    tmp2 = [abs(lReaches2(:,1:2) - segment(i,2)) lReaches2(:,3:4) (1:length(lReaches2))'];
    
    
    
    condA = find(tmp1(:,4) == 12);
    condB = find(tmp2(:,4) == 12);
    
    tmp1 = tmp1(condA, :);
    tmp2 = tmp2(condB, :);
    
    [val1, row1] = min(tmp1(:,2));
    [val2, row2] = min(tmp2(:,2));
    
    
    if (val1 > 1000) % sometimes reach to 12 isn't found
      segment2(i,2) = (segment(i,2));
    else
      segment2(i,2) = (rReaches2(tmp1(row1, 5), 2));
    end
    
  end


  %ok now we have the true end when the hand has finished reaching to 12
  segment3 = [ 1,                segment2(1,2);...
	       segment2(1,2)+1,  segment2(2,2);...
	       segment2(2,2)+1,  segment2(3,2);...
	       segment2(3,2)+1,  segment2(4,2);...
	       segment2(4,2)+1,  segment2(5,2)];

  %The variable segment now holds begin and end times for all 5 models
  %Now we can segment reaches and fixations for each model

  model_1_fixations = partition(A2, 1, segment3);
  model_1_rReaches  = partition(rReaches2, 1, segment3);
  model_1_lReaches  = partition(lReaches2, 1, segment3);

  model_2_fixations = partition(A2, 2, segment3);
  model_2_rReaches  = partition(rReaches2, 2, segment3);
  model_2_lReaches  = partition(lReaches2, 2, segment3);

  model_3_fixations = partition(A2, 3, segment3);
  model_3_rReaches  = partition(rReaches2, 3, segment3);
  model_3_lReaches  = partition(lReaches2, 3, segment3);

  model_4_fixations = partition(A2, 4, segment3);
  model_4_rReaches  = partition(rReaches2, 4, segment3);
  model_4_lReaches  = partition(lReaches2, 4, segment3);

  model_5_fixations = partition(A2, 5, segment3);
  model_5_rReaches  = partition(rReaches2, 5, segment3);
  model_5_lReaches  = partition(lReaches2, 5, segment3);



  %process each model and hand for fixation/reach associations
  [model_1_rReach_fixation_associations, model_1_rReach_fixation_summary] ...
      = fixation_segment(model_1_rReaches, model_1_lReaches, ...
			 model_1_fixations, time, 'right');
  [model_1_lReach_fixation_associations, model_1_lReach_fixation_summary] ...
      = fixation_segment(model_1_rReaches, model_1_lReaches, ...
			 model_1_fixations, time, 'left');
  [model_2_rReach_fixation_associations, model_2_rReach_fixation_summary] ...
      = fixation_segment(model_2_rReaches, model_2_lReaches, ...
			 model_2_fixations, time, 'right');
  [model_2_lReach_fixation_associations, model_2_lReach_fixation_summary] ...
      = fixation_segment(model_2_rReaches, model_2_lReaches, ...
			 model_2_fixations, time, 'left');
  [model_3_rReach_fixation_associations, model_3_rReach_fixation_summary] ...
      = fixation_segment(model_3_rReaches, model_3_lReaches, ...
			 model_3_fixations, time, 'right');
  [model_3_lReach_fixation_associations, model_3_lReach_fixation_summary] ...
      = fixation_segment(model_3_rReaches, model_3_lReaches, ...
			 model_3_fixations, time, 'left');
  [model_4_rReach_fixation_associations, model_4_rReach_fixation_summary] ...
      = fixation_segment(model_4_rReaches, model_4_lReaches, ...
			 model_4_fixations, time, 'right');
  [model_4_lReach_fixation_associations, model_4_lReach_fixation_summary] ...
      = fixation_segment(model_4_rReaches, model_4_lReaches, ...
			 model_4_fixations, time, 'left');
  [model_5_rReach_fixation_associations, model_5_rReach_fixation_summary] ...
      = fixation_segment(model_5_rReaches, model_5_lReaches, ...
			 model_5_fixations, time, 'right');
  [model_5_lReach_fixation_associations, model_5_lReach_fixation_summary] ...
      = fixation_segment(model_5_rReaches, model_5_lReaches, ...
			 model_5_fixations, time, 'left');
  
  
  model_1_rHand_result = [model_1_rReaches model_1_rReach_fixation_associations ...
		    ((model_1_rReach_fixation_associations(:,2)) + (model_1_rReach_fixation_associations(:,3)) ...
		     + (model_1_rReach_fixation_associations(:,4)))];
  
  model_1_lHand_result = [model_1_lReaches model_1_lReach_fixation_associations ...
		    ((model_1_lReach_fixation_associations(:,2)) + (model_1_lReach_fixation_associations(:,3)) ...
		     + (model_1_lReach_fixation_associations(:,4)))];
  
  model_2_rHand_result = [model_2_rReaches model_2_rReach_fixation_associations ...
		    ((model_2_rReach_fixation_associations(:,2)) + (model_2_rReach_fixation_associations(:,3)) ...
		     + (model_2_rReach_fixation_associations(:,4)))];

  model_2_lHand_result = [model_2_lReaches model_2_lReach_fixation_associations ...
		    ((model_2_lReach_fixation_associations(:,2)) + (model_2_lReach_fixation_associations(:,3)) ...
		     + (model_2_lReach_fixation_associations(:,4)))];
  
  model_3_rHand_result = [model_3_rReaches model_3_rReach_fixation_associations ...
		    ((model_3_rReach_fixation_associations(:,2)) + (model_3_rReach_fixation_associations(:,3)) ...
		     + (model_3_rReach_fixation_associations(:,4)))];

  model_3_lHand_result = [model_3_lReaches model_3_lReach_fixation_associations ...
		    ((model_3_lReach_fixation_associations(:,2)) + (model_3_lReach_fixation_associations(:,3)) ...
		     + (model_3_lReach_fixation_associations(:,4)))];
  
  model_4_rHand_result = [model_4_rReaches model_4_rReach_fixation_associations ...
		    ((model_4_rReach_fixation_associations(:,2)) + (model_4_rReach_fixation_associations(:,3)) ...
		     + (model_4_rReach_fixation_associations(:,4)))];

  model_4_lHand_result = [model_4_lReaches model_4_lReach_fixation_associations ...
		    ((model_4_lReach_fixation_associations(:,2)) + (model_4_lReach_fixation_associations(:,3)) ...
		     + (model_4_lReach_fixation_associations(:,4)))];

  model_5_rHand_result = [model_5_rReaches model_5_rReach_fixation_associations ...
		    ((model_5_rReach_fixation_associations(:,2)) + (model_5_rReach_fixation_associations(:,3)) ...
		     + (model_5_rReach_fixation_associations(:,4)))];
  
  model_5_lHand_result = [model_5_lReaches model_5_lReach_fixation_associations ...
		    ((model_5_lReach_fixation_associations(:,2)) + (model_5_lReach_fixation_associations(:,3)) ...
		     + (model_5_lReach_fixation_associations(:,4)))];



  %Display total fixations for all trials via two counting methods
  single_model(1,:) = count(model_1_fixations, model_1_lHand_result, model_1_rHand_result);
  single_model(2,:) = count(model_2_fixations, model_2_lHand_result, model_2_rHand_result);
  single_model(3,:) = count(model_3_fixations, model_3_lHand_result, model_3_rHand_result);
  single_model(4,:) = count(model_4_fixations, model_4_lHand_result, model_4_rHand_result);
  single_model(5,:) = count(model_5_fixations, model_5_lHand_result, model_5_rHand_result);

  
  model_bins(1:10, 1) = [82; 76; 82; 76; 82; 76; 82; 76; 82; 76;];
  model_bins(1,2:19) = bin_fix_count(model_1_rReach_fixation_summary);
  model_bins(2,2:19) = bin_fix_count(model_1_lReach_fixation_summary);
  model_bins(3,2:19) = bin_fix_count(model_2_rReach_fixation_summary);
  model_bins(4,2:19) = bin_fix_count(model_2_lReach_fixation_summary); 
  model_bins(5,2:19) = bin_fix_count(model_3_rReach_fixation_summary);
  model_bins(6,2:19) = bin_fix_count(model_3_lReach_fixation_summary);  
  model_bins(7,2:19) = bin_fix_count(model_4_rReach_fixation_summary);
  model_bins(8,2:19) = bin_fix_count(model_4_lReach_fixation_summary);
  model_bins(9,2:19) = bin_fix_count(model_5_rReach_fixation_summary);
  model_bins(10,2:19)= bin_fix_count(model_5_lReach_fixation_summary);
  
  



data1 = spss(model_1_rReach_fixation_summary, 1, 82, model_1_fixations, time);
data2 = spss(model_1_lReach_fixation_summary, 1, 76, model_1_fixations, time);
data3 = spss(model_2_rReach_fixation_summary, 2, 82, model_2_fixations, time);
data4 = spss(model_2_lReach_fixation_summary, 2, 76, model_2_fixations, time);
data5 = spss(model_3_rReach_fixation_summary, 3, 82, model_3_fixations, time);
data6 = spss(model_3_lReach_fixation_summary, 3, 76, model_3_fixations, time);
data7 = spss(model_4_rReach_fixation_summary, 4, 82, model_4_fixations, time);
data8 = spss(model_4_lReach_fixation_summary, 4, 76, model_4_fixations, time);
data9 = spss(model_5_rReach_fixation_summary, 5, 82, model_5_fixations, time);
data10= spss(model_5_lReach_fixation_summary, 5, 76, model_5_fixations, time);

neil_dat = [data1; data2; data3; data4; data5; data6; data7; data8; ...
	    data9; data10; ];



%keyboard
  segment4 = time(segment3); 
  five_model_summary = sum(single_model);

  if(debug == 1)
  %debug   
  fixations_via_adding_model_fix = length(model_1_fixations) + ...
      length(model_2_fixations) + length(model_3_fixations) + ...
      length(model_4_fixations) + length(model_5_fixations);
  
  fixations_from_vrfat = length(fixations);
  model;
  
  disp '  Total  LAH  Guiding LB Empty1 Empty2 Full1 Full2'
  single_model

  disp '  Total  LAH  Guiding  LB Empty1 Empty2 Full1 Full2'
  five_model_summary = sum(single_model)
  
  disp '     [---Look-Aheads----------------]    [-------Guiding/Grab/Return----]    [---Look-Backs-----------------]'
  disp '     1     2     3     4     9     10    1     2     3     4     9     10    1    2     3      4     9     10'
  model_bins

  
  a = sum(model_bins);
  b(1,:) = a(1:6);
  b(2,:) = a(7:12);
  b(3,:) = a(13:18);
  bin_sum1234_9_10 = sum(b) 

  fix_type_sum(1,1) = sum(a(1:6));
  fix_type_sum(1,2) = sum(a(7:12));
  fix_type_sum(1,3) = sum(a(13:18));
  fix_type_sum

  %plot train tracks!
  baufix_plot([], 'legend', []);
  baufix_plot(fixArray, 'fix', []);
  baufix_plot(lReachArray, 'lhand', []);
  baufix_plot(rReachArray, 'rhand', []);
  baufix_plot([], 'fix_plot', xy_average);
  
end


  save_summary(dataFile, single_model, five_model_summary, model_bins, ...
	       model_1_rReach_fixation_summary, model_1_lReach_fixation_summary,...
      	       model_2_rReach_fixation_summary, model_2_lReach_fixation_summary,...
	       model_3_rReach_fixation_summary, model_3_lReach_fixation_summary,...
	       model_4_rReach_fixation_summary, model_4_lReach_fixation_summary,...
	       model_5_rReach_fixation_summary, model_5_lReach_fixation_summary,...
	       neil_dat, segment4);
  
  return 

  
  
%-------------------------------------------------------------------------%
%Start function definitions:
%-------------------------------------------------------------------------%

%-------------------------------------------------------------------------%
%   This counts and sums the fixation types in in a variety of ways
%-------------------------------------------------------------------------%

function fix_count = count(model_n_fixations, model_n_lHand_result, model_n_rHand_result)

  global Piece1 Piece2 Piece3 Piece4 EmptyDist1 EmptyDist2 ...
      FullDist1 FullDist2;

  %setup logical conditions to filter with the find command
  emptyA = (model_n_fixations(:,5) == EmptyDist1);
  emptyB = (model_n_fixations(:,5) == EmptyDist2);
  
  fullA = (model_n_fixations(:,5) == FullDist1);
  fullB = (model_n_fixations(:,5) == FullDist2);

  total = ((model_n_fixations(:,5) == 1)|(model_n_fixations(:,5) == 2)|...
	   (model_n_fixations(:,5) == 3)|(model_n_fixations(:,5) == 4)|...
	   (model_n_fixations(:,5) == 5)|(model_n_fixations(:,5) == 6)|...	   
	   (model_n_fixations(:,5) == 7)|(model_n_fixations(:,5) == 8)|...
	   (model_n_fixations(:,5) == 9)|(model_n_fixations(:,5) == 10));


  active_bins_l = ((model_n_lHand_result(:,4) == Piece1)|(model_n_lHand_result(:,4) == Piece2)|...
		   (model_n_lHand_result(:,4) == Piece3)|(model_n_lHand_result(:,4) == Piece4)|...
                   (model_n_lHand_result(:,4) == 9)|(model_n_lHand_result(:,4) == 10));
  
  active_bins_r = ((model_n_rHand_result(:,4) == Piece1)|(model_n_rHand_result(:,4) == Piece2)|...
		   (model_n_rHand_result(:,4) == Piece3)|(model_n_rHand_result(:,4) == Piece4)|...
                   (model_n_rHand_result(:,4) == 9)|(model_n_rHand_result(:,4) == 10));

  empty2a = model_n_fixations(find(emptyA), :);
  empty2b = model_n_fixations(find(emptyB), :);
  full2a = model_n_fixations(find(fullA), :);
  full2b = model_n_fixations(find(fullB), :);

  total2 = model_n_fixations(find(total), :);
  active_bins_l2 = model_n_lHand_result(find(active_bins_l),:);
  active_bins_r2 = model_n_rHand_result(find(active_bins_r),:);

  lah_sum = sum(active_bins_l2(:,6))+sum(active_bins_r2(:,6));
  guiding_sum = sum(active_bins_l2(:,7))+sum(active_bins_r2(:,7));
  lb_sum = sum(active_bins_l2(:,8))+sum(active_bins_r2(:,8));

  total_sum = size(total2(:,1)); 
  fullA_sum =  size(full2a(:,1));
  fullB_sum =  size(full2b(:,1));
  emptyA_sum = size(empty2a(:,1));
  emptyB_sum = size(empty2b(:,1));

  fix_count = [ total_sum(1,1) lah_sum guiding_sum lb_sum...
		emptyA_sum(1,1) emptyB_sum(1,1) fullA_sum(1,1) fullB_sum(1,1) ];
  
  return


%-------------------------------------------------------------------------%
%Now we need to count things individually
%-------------------------------------------------------------------------%
function bin_fix_counter = ...
      bin_fix_count(model_n_Reach_fixation_summary)
  
  global Piece1 Piece2 Piece3 Piece4 EmptyDist1 EmptyDist2 ...
      FullDist1 FullDist2;

  %if no reaches exist the create an array of zeros
  if(model_n_Reach_fixation_summary == 0)
    model_n_Reach_fixation_summary(:,9) = 0;
  end
  

  for i = 1:3
    %reminder (:,8) = fix type  and (:,7) is the reach bin 
    cond1 =(model_n_Reach_fixation_summary(:,7) == Piece1)&(model_n_Reach_fixation_summary(:,8) == i);
    cond2 =(model_n_Reach_fixation_summary(:,7) == Piece2)&(model_n_Reach_fixation_summary(:,8) == i);
    cond3 =(model_n_Reach_fixation_summary(:,7) == Piece3)&(model_n_Reach_fixation_summary(:,8) == i);
    cond4 =(model_n_Reach_fixation_summary(:,7) == Piece4)&(model_n_Reach_fixation_summary(:,8) == i);
    cond5 =(model_n_Reach_fixation_summary(:,7) == 9 )&(model_n_Reach_fixation_summary(:,8) == i);
    cond6 =(model_n_Reach_fixation_summary(:,7) == 10)&(model_n_Reach_fixation_summary(:,8) == i);

    if (i == 1)
      bin_fix_counter (1,1) = sum(cond1); 
      bin_fix_counter (1,2) = sum(cond2);
      bin_fix_counter (1,3) = sum(cond3);
      bin_fix_counter (1,4) = sum(cond4);
      bin_fix_counter (1,5) = sum(cond5);
      bin_fix_counter (1,6) = sum(cond6);
      
    elseif (i == 2)
      bin_fix_counter (1,7) = sum(cond1); 
      bin_fix_counter (1,8) = sum(cond2);
      bin_fix_counter (1,9) = sum(cond3);
      bin_fix_counter (1,10) = sum(cond4);
      bin_fix_counter (1,11) = sum(cond5);
      bin_fix_counter (1,12) = sum(cond6);
      
    elseif (i == 3)
      bin_fix_counter (1,13) = sum(cond1); 
      bin_fix_counter (1,14) = sum(cond2);
      bin_fix_counter (1,15) = sum(cond3);
      bin_fix_counter (1,16) = sum(cond4);
      bin_fix_counter (1,17) = sum(cond5);
      bin_fix_counter (1,18) = sum(cond6);
      
    end
  end

  return


%-----------------------------------------------------
%Partition finds the relevant areas of reaches or
%fixations so we can process each model individually
%-----------------------------------------------------
function model_n_parts = partition(data, model_num, segment)

  if(model_num == 1)
    cond1 = data(:,1) >  segment(model_num, 1);
    cond2 = data(:,2) <  segment(model_num, 2);
    model_n_parts  = data(find(cond1 & cond2),:);
  else
    cond1 = data(:,1) >  segment(model_num-1,2);
    cond2 = data(:,2) <  segment(model_num,2);
    model_n_parts  = data(find(cond1 & cond2),:);
  end

  return

  

%-----------------------------------------------
%make files into something neil can use in spss
%-----------------------------------------------  

function data = spss(model_n_Reach_fixation_summary, mod_num, hand, ...
		     fixArray, time)

  
 
%ok folks if you thought everything above was ugly, fasten your
%seatbelts for this next descent

  Reach_list = unique(model_n_Reach_fixation_summary(:,3));

  for i = 2:size(Reach_list, 1)
    
    %ok first we need a few basic pieces of info common to all reaches
    tmp1 = find(model_n_Reach_fixation_summary(:,3) == Reach_list(i,1));
    reach_num = model_n_Reach_fixation_summary(tmp1(1,1),3); % reach#
    reach_i = model_n_Reach_fixation_summary(tmp1(1,1),4); %reach_init
    reach_f = model_n_Reach_fixation_summary(tmp1(1,1),5); %reach_fin
    reach_dur =  reach_f - reach_i;
    area_i = model_n_Reach_fixation_summary(tmp1(1,1),6); 
    area_f = model_n_Reach_fixation_summary(tmp1(1,1),7);
    saccade_i = 0;
    clear tmp1

    %now screen for fix_type
    tmp1 = find((model_n_Reach_fixation_summary(:,3) == Reach_list(i,1))&(model_n_Reach_fixation_summary(:,8) == 1));
    %do same for guiding
    tmp2 = find((model_n_Reach_fixation_summary(:,3) == Reach_list(i,1))&(model_n_Reach_fixation_summary(:,8) == 2));

    
    
        %test for continuity
    if (~(isempty(tmp2)))&(length(tmp2) ~= 1)
      test2 = model_n_Reach_fixation_summary(tmp2(2:end,1),10) -...
              model_n_Reach_fixation_summary(tmp2(1:end-1,1), 10);
      if ( (sum(test2(:,1))/length(test2)) == 1 )
	guide_inter = 0;  num_inter = 0;
      else guide_inter = 1;
	   num_inter = sum(test2(:,1)) - size(test2,1);
	
      end
    else guide_inter = 0;
         num_inter = 0;
    end

%find bounds for fixation search
	f_dur = 0; g_dur = 0; fs_dur = 0; gs_dur = 0;
	

if (~(isempty(tmp2)))&(length(tmp2) ~= 1)	
  
  f_min = min(model_n_Reach_fixation_summary(tmp2(:,1),10));
  f_max = max(model_n_Reach_fixation_summary(tmp2(:,1),10));	
%these bounds apply to all fixations	
for i = f_min:f_max,
 
  %fixation time
  tmp_dur = time(fixArray(i, 2))-time(fixArray(i, 1));    
  f_dur = f_dur + tmp_dur;
  
  %saccade time
  tmp_dur = time(fixArray(i, 1))-time(fixArray(i-1, 2));   
  fs_dur = fs_dur + tmp_dur;
  
end


%these bounds apply to guiding fixations
for i = 1:size(tmp2,1)
  
  tmp_dur = time(fixArray(model_n_Reach_fixation_summary(tmp2(i,1), 10), 2))...
	   -time(fixArray(model_n_Reach_fixation_summary(tmp2(i,1), 10), 1));    
  g_dur = g_dur + tmp_dur;

  %saccade time
  tmp_dur = time(fixArray(model_n_Reach_fixation_summary(tmp2(i,1), 10), 1))...
	   -time(fixArray(model_n_Reach_fixation_summary(tmp2(i,1), 10)-1, 2));    
  
  gs_dur = gs_dur + tmp_dur;


end

model_n_Reach_fixation_summary
total = time(fixArray(f_max, 2))-time(fixArray(f_min-1, 2))

end

reach_num
num_guiding = size(tmp2,1)
num_inter
g_dur
f_dur
gs_dur
fs_dur
f_tot = f_dur+fs_dur
o_dur = f_dur-g_dur
os_dur = fs_dur-gs_dur

    keyboard
    
    
    if ~isempty(tmp1)
      lah_i = (model_n_Reach_fixation_summary(max(tmp1), 1)); %lah look_init
      lah_f = (model_n_Reach_fixation_summary(max(tmp1), 2)); %lah look_end
      lah_dur = lah_f - lah_i;
      num_lah = size(tmp1, 1);
      T = reach_i - lah_f;
 

      if(size(tmp1,1)>1)

	 if(model_n_Reach_fixation_summary(tmp1(end,1),10) - model_n_Reach_fixation_summary(tmp1(end-1,1),10) == 1)
	 pu_connect = 1;
	 else
	 pu_connect = 0; 
	 end
	 
	 plah_i = (model_n_Reach_fixation_summary(tmp1(end-1), 1)); %lah look_init
         plah_f = (model_n_Reach_fixation_summary(tmp1(end-1), 2));
     
         plah_dur = plah_f - plah_i;   
         T2 = reach_i -plah_f;
	 
      else
       plah_i = 0; plah_f = 0; plah_dur = 0; T2 = 0; pu_connect = 0;
      end
      
    else
      lah_i = 0; lah_f = 0; num_lah = 0; lah_dur = 0; T=0;
      plah_i = 0; plah_f = 0; plah_dur = 0; lah_inter = 0; T2 = 0;
      pu_connect = 0;
    end

    if ~isempty(tmp2) 
      
     
     if(model_n_Reach_fixation_summary(min(tmp2), 10) ~= 1)
      saccade_i = time(fixArray(model_n_Reach_fixation_summary(min(tmp2), 10) -1, 2))-0.05;      
     else
       saccade_i = 0; %fix for examining first fixation
     end
     
      guide_i = (model_n_Reach_fixation_summary(min(tmp2), 1)); %guiding look_init
      guide_f = (model_n_Reach_fixation_summary(max(tmp2), 2)); %guiding look_end

      guide_dur = guide_f - guide_i;
      num_guiding = size(tmp2, 1);                                                    
    
    
    else 
      guide_i = 0; guide_f = 0; num_guiding = 0; guide_dur = 0; ...
		guide_inter = 0;
    end

    
    %calc eye-hand latencies
    D = reach_i - saccade_i;
    D2 = reach_f - guide_f;
    
    %discerning the ultimate and the penultimate 
    if(i == 2)
      data = [mod_num area_i area_f reach_num hand reach_i reach_f reach_dur...
	       num_guiding saccade_i guide_i guide_f guide_inter guide_dur D D2 num_lah...
	       lah_i lah_f lah_dur T plah_i plah_f plah_dur T2 pu_connect];
 
    elseif(i ~= 2)
      data(end+1,:) = [mod_num area_i area_f reach_num hand reach_i reach_f reach_dur...
		       num_guiding saccade_i guide_i guide_f guide_inter guide_dur D D2 num_lah...
		       lah_i lah_f lah_dur T plah_i plah_f plah_dur...
		      T2 pu_connect];
      
    end
  end

if ~exist('data', 'var')
data = [mod_num 0 0 0 hand 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0];
end

  return

















